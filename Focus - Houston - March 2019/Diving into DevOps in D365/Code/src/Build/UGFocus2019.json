{
    "options": [
        {
            "enabled": false,
            "definition": {
                "id": "5d58cc01-7c75-450c-be18-a388ddb129ec"
            },
            "inputs": {
                "branchFilters": "[\"+refs/heads/*\"]",
                "additionalFields": "{}"
            }
        },
        {
            "enabled": false,
            "definition": {
                "id": "a9db38f9-9fdc-478c-b0f9-464221e58316"
            },
            "inputs": {
                "workItemType": "Bug",
                "assignToRequestor": "true",
                "additionalFields": "{}"
            }
        }
    ],
    "variables": {
        "Branch": {
            "value": "master"
        },
        "BuildConfig": {
            "value": "release"
        },
        "BuildToolsRepoName": {
            "value": "BuildTools"
        },
        "D365SolutionName": {
            "value": ""
        },
        "D365SolutionVersions": {
            "value": ""
        },
        "PluginsRepoName": {
            "value": "Plugins"
        },
        "SolutionName": {
            "value": "UGFocus2019"
        },
        "SolutionXmlRepoName": {
            "value": "SolutionXml"
        },
        "SolutionZipRepoName": {
            "value": "SolutionZip"
        },
        "system.debug": {
            "value": "false",
            "allowOverride": true
        },
        "WebResourcesRepoName": {
            "value": "WebResources"
        }
    },
    "variableGroups": [
        {
            "variables": {
                "AppInsightsKey": {
                    "value": "30379e49-355a-4cf9-8611-7edf6dbc3650"
                }
            },
            "type": "Vsts",
            "name": "Common Variables",
            "id": 6
        },
        {
            "variables": {
                "CrmDevPassword": {
                    "value": null,
                    "isSecret": true
                },
                "CrmDevUrl": {
                    "value": null,
                    "isSecret": true
                },
                "CrmDevUsername": {
                    "value": null,
                    "isSecret": true
                },
                "CrmTestPassword": {
                    "value": null,
                    "isSecret": true
                },
                "CrmTestUrl": {
                    "value": null,
                    "isSecret": true
                },
                "CrmTestUsername": {
                    "value": null,
                    "isSecret": true
                }
            },
            "type": "AzureKeyVault",
            "name": "UGFocus2019 Key Vault",
            "id": 5
        }
    ],
    "retentionRules": [
        {
            "branches": [
                "+refs/heads/*"
            ],
            "artifacts": [],
            "artifactTypesToDelete": [
                "FilePath",
                "SymbolStore"
            ],
            "daysToKeep": 10,
            "minimumToKeep": 1,
            "deleteBuildRecord": true,
            "deleteTestResults": true
        }
    ],
    "properties": {},
    "tags": [],
    "_links": {
        "self": {
            "href": "https://YourAzureDevopsName.visualstudio.com/b455f045-317c-4982-be69-da57d4e4f6ba/_apis/build/Definitions/40?revision=55"
        },
        "web": {
            "href": "https://YourAzureDevopsName.visualstudio.com/b455f045-317c-4982-be69-da57d4e4f6ba/_build/definition?definitionId=40"
        },
        "editor": {
            "href": "https://YourAzureDevopsName.visualstudio.com/b455f045-317c-4982-be69-da57d4e4f6ba/_build/designer?id=40&_a=edit-build-definition"
        },
        "badge": {
            "href": "https://YourAzureDevopsName.visualstudio.com/b455f045-317c-4982-be69-da57d4e4f6ba/_apis/build/status/40"
        }
    },
    "jobAuthorizationScope": 1,
    "jobTimeoutInMinutes": 60,
    "jobCancelTimeoutInMinutes": 5,
    "process": {
        "phases": [
            {
                "steps": [
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script: Clone Repository: BuildTools",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Clones an Azure DevOps git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n\n$Parameters = @{\n    DevOpsAccountName = \"$env:VSTS_ACCOUNT\"\n    DevOpsProjectName = \"$(System.TeamProject)\"\n    DevOpsRepoName = \"$(BuildToolsRepoName)\"\n    TargetFolder = \"$(Agent.BuildDirectory)\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$CloneToFolder = \"$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nNew-Item -ItemType Directory -Force -Path $CloneToFolder\nWrite-Host \"Created folder: $CloneToFolder\"\n\nWrite-Host \"Cloning repo: $($Parameters.DevOpsRepoName)\"\ngit clone https://vsts:$(System.AccessToken)@$($Parameters.DevOpsAccountName).visualstudio.com/$($Parameters.DevOpsProjectName)/_git/$($Parameters.DevOpsRepoName) $CloneToFolder\nWrite-Host \"Clone complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Visual Studio Test Platform Installer",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "2c65196a-54fd-4a02-9be8-d9d1837b7111",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "packageFeedSelector": "nugetOrg",
                            "versionSelector": "latestStable",
                            "testPlatformVersion": "",
                            "customFeed": "",
                            "username": "",
                            "password": "",
                            "netShare": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Export): Export Solution Patch",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Export the latest patch version of a solution\n#\n# https://docs.microsoft.com/en-us/dynamics365/customer-engagement/customize/import-update-export-solutions#export-solutions\n#\n# Output Pipeline Variable: D365SolutionName (soution uniquename)\n# Output Pipeline Variable: D365SolutionVersion (solution version)\n# Output Pipeline Variable: D365SolutionFilenamen (solution filename)\n\n\n$Credentials = @{\n    Username = \"$(CrmDevUsername)\"\n    Password = \"$(CrmDevPassword)\"\n    Url = \"$(CrmDevUrl)\"\n}\n\n$Parameters = @{\n    SolutionUniqueName = \"$(SolutionName)\"\n    OutputPath = \"$(Agent.BuildDirectory)\\DownloadedSolutions\"\n    ExportAsManaged = $false\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$User = $Credentials.Username\n$PWord =  $Credentials.Password | ConvertTo-SecureString -AsPlainText -Force\n$Url = $Credentials.Url\n\n$ReturnSolutionName = ''\n$ReturnSolutionVersion = ''\n\n$Cred = New-Object –TypeName System.Management.Automation.PSCredential –ArgumentList $User, $PWord\n$Conn = Connect-CrmOnline -Credential $Cred -ServerUrl $Url\n\nIf ($Conn.IsReady -eq $false) {\n    Throw \"Error connecting to CRM\"\n}\n\n# Create target folder\nNew-Item -ItemType Directory -Force -Path $($Parameters.OutputPath)\nWrite-Host \"Created folder: $($Parameters.OutputPath)\"\n\n# Get parent solution by name\n$Solutions = Get-CrmRecords -EntityLogicalName solution `\n                            -conn $Conn `\n                            -Fields 'solutionid', 'friendlyname', 'version', 'ismanaged', 'uniquename' `\n                            -FilterAttribute uniquename `\n                            -FilterOperator eq `\n                            -FilterValue $Parameters.SolutionUniqueName\n\nIf ($Solutions.CrmRecords.Count -eq 1) {\n    Write-Host \"Searching for solution: $($Parameters.SolutionUniqueName)\"\n    $ParentSolutionId = $Solutions.CrmRecords[0].solutionid\n    $ReturnSolutionName = $Solutions.CrmRecords[0].uniquename \n    $ReturnSolutionVersion = \"_\" + $Solutions.CrmRecords[0].version.Replace(\".\", \"_\")\n    Write-Host \"Found solution:\" $ParentSolutionId \"-\" $Solutions.CrmRecords[0].friendlyname  \"-\" $Solutions.CrmRecords[0].version\n\n    # Get most recent patch solution based on created on date\n    $PatchQuery = \"<fetch>\n                        <entity name='solution'>\n                        <attribute name='solutionid' />\n                        <attribute name='friendlyname' />\n                        <attribute name='version' />\n                        <attribute name='ismanaged' />\n                        <attribute name='uniquename' />\n                        <filter>\n                            <condition attribute='parentsolutionid' operator='eq' value='$ParentSolutionId' />\n                        </filter>\n                        <order attribute='createdon' descending='true' />\n                        </entity>\n                    </fetch>\"\n\n    Write-Host \"Searching for latest solution patch for: $Parameters.SolutionUniqueName\"\n    $PatchSolutions = Get-CrmRecordsByFetch -Fetch $PatchQuery -conn $Conn -TopCount 1\n    If ($PatchSolutions.CrmRecords.Count -eq 1) {\n        $ReturnSolutionName = $PatchSolutions.CrmRecords[0].uniquename\n        $ReturnSolutionVersion = \"_\" + $PatchSolutions.CrmRecords[0].version.Replace(\".\", \"_\")\n        Write-Host \"Found latest solution patch:\" $PatchSolutions.CrmRecords[0].solutionid \"-\" $ReturnSolutionName \"-\" $PatchSolutions.CrmRecords[0].version\n    }\n}\nElse {\n    Throw \"Unable to find solution: $Parameters.SolutionUniqueName\"\n}\n\n# Export the solution\n$ExportSolutionFile = $ReturnSolutionName + $(If ($ExportAsManaged) {\"_managed\"}) + $ReturnSolutionVersion + '.zip'\n$Args = @{\n    SolutionName = $ReturnSolutionName\n    conn = $Conn\n    SolutionFilePath = $Parameters.OutputPath\n    SolutionZipFileName = $ExportSolutionFile\n    Managed = $Parameters.ExportAsManaged\n    ExportEmailTrackingSettings = $false\n    ExportGeneralSettings = $false\n    ExportIsvConfig = $false\n    ExportMarketingSettings = $false\n    ExportOutlookSynchronizationSettings = $false\n    ExportRelationshipRoles = $false\n    ExportSales = $false\n}\n\nWrite-Host \"Exporting solution: $ExportSolutionFile\"\nWrite-Host \"Exporting with parameters:\"\nWrite-Host ($Args | Out-String)\nExport-CrmSolution @Args\nWrite-Host \"Exporting solution complete: $ExportSolutionFile\"\n\nWrite-Host \"##vso[task.setvariable variable=D365SolutionName;]$ReturnSolutionName\"\nWrite-Host \"##vso[task.setvariable variable=D365SolutionVersion;]$ReturnSolutionVersion\"\nWrite-Host \"##vso[task.setvariable variable=D365SolutionFilename;]$ExportSolutionFile\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Export): Extract Solution",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Extract customization xml from a solution zip file\n# \n# https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/compress-extract-solution-file-solutionpackager\n#\n# Prerequisites:\n# Clone BuildTools repository\n\n$Parameters = @{\n    SolutionPackagerPath = \"$(Agent.BuildDirectory)\\BuildTools\\SDK\\SolutionPackager\\SolutionPackager.exe\"\n    SolutionFilePath = \"$(Agent.BuildDirectory)\\DownloadedSolutions\\\"\n    SolutionFilename = \"$(D365SolutionFilename)\"\n    IsManaged = $false\n    OutputPath = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\"\n    MappingFilePath = \"\"\n    TreatPackWarningsAsErrors = $false\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n# Extract solution file\n$PackageType = If ($Parameters.IsManaged) {'Managed'} Else {'Unmanaged'}\nWrite-Host \"PackageType: $PackageType\"\n\n$SolutionFullPath = \"$($Parameters.SolutionFilePath)$($Parameters.SolutionFilename)\"\nWrite-Host \"SolutionFullPath: $SolutionFullPath\"\n\n$Map = If (![string]::IsNullOrEmpty($Parameters.MappingFilePath)) {\"/map:'$($Parameters.MappingFilePath)'\"}\nWrite-Host \"Map: $Map\"\n\nWrite-Host \"Extracting solution file: $SolutionFullPath\"\n$ExtractOuput = & \"$($Parameters.SolutionPackagerPath)\" /action:Extract /zipfile:\"$SolutionFullPath\" /folder:\"$($Parameters.OutputPath)\" `\n    /packagetype:$PackageType /errorlevel:Info /allowWrite:Yes /allowDelete:Yes $Map\nWrite-Host $ExtractOuput\n\n# Check for errors\nIf ($LastExitCode -ne 0) {\n    Throw \"Solution Extract operation failed with exit code: $LastExitCode\"\n}\nElse {\n    If (($ExtractOuput -ne $null) -and ($ExtractOuput -like \"*warnings encountered*\")) {\n        If ($Parameters.TreatPackWarningsAsErrors) {\n            Throw \"Solution Packager encountered warnings. Check the output\"\n        }\n        Else {\n            Write-Warning \"Solution Packager encountered warnings. Check the output\"\n        }\n    }\n    Else {\n        Write-Host \"Solution Extract completed successfully\"\n    }\n}\nWrite-Host \"Extraction complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Xml): Clone Repository: SolutionXml",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Clones an Azure DevOps git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n\n$Parameters = @{\n    DevOpsAccountName = \"$env:VSTS_ACCOUNT\"\n    DevOpsProjectName = \"$(System.TeamProject)\"\n    DevOpsRepoName = \"$(SolutionXmlRepoName)\"\n    TargetFolder = \"$(Agent.BuildDirectory)\\Repos\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$CloneToFolder = \"$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nNew-Item -ItemType Directory -Force -Path $CloneToFolder\nWrite-Host \"Created folder: $CloneToFolder\"\n\nWrite-Host \"Cloning repo: $($Parameters.DevOpsRepoName)\"\ngit clone https://vsts:$(System.AccessToken)@$($Parameters.DevOpsAccountName).visualstudio.com/$($Parameters.DevOpsProjectName)/_git/$($Parameters.DevOpsRepoName) $CloneToFolder\nWrite-Host \"Clone complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (JavaScript): Check For JavaScript",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Determines if any JavaScript files are included in the target solution\n#\n# Output Pipeline Variable: D365SolutionHasJavaScriptFiles (boolean to indicate if JavaScript is present in the solution)\n# Output Pipeline Variable: D365SolutionJavaScriptFiles (comma delimited list of JavaScript file names)\n\n$Parameters = @{\n    SourceFolder = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\\WebResources\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$HasJavaScriptFiles = $false\n$JavaScriptFiles = ''\n\nWrite-Host \"Searching for JavaScript\"\nif (Test-Path $($Parameters.SourceFolder)) {\n    $JavaScriptFiles = (Get-ChildItem -recurse -Path $($Parameters.SourceFolder) -File *.js | select $_.Name) -join ','\n    $HasJavaScriptFiles = $true\n    Write-Host \"Found: $JavaScriptFiles\"\n}\nWrite-Host \"Search complete\"\n\nIf (!$HasJavaScriptFiles) {\n    Write-Host \"No JavaScript files found\"\n}\n\nWrite-Host \"##vso[task.setvariable variable=D365SolutionHasJavaScriptFiles;]$HasJavaScriptFiles\"\nWrite-Host \"##vso[task.setvariable variable=D365SolutionJavaScriptFiles;]$JavaScriptFiles\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (JavaScript): Clone Repository: WebResources",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasJavaScriptFiles'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Clones an Azure DevOps git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n\n$Parameters = @{\n    DevOpsAccountName = \"$env:VSTS_ACCOUNT\"\n    DevOpsProjectName = \"$(System.TeamProject)\"\n    DevOpsRepoName = \"$(WebResourcesRepoName)\"\n    TargetFolder = \"$(Agent.BuildDirectory)\\Repos\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$CloneToFolder = \"$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nNew-Item -ItemType Directory -Force -Path $CloneToFolder\nWrite-Host \"Created folder: $CloneToFolder\"\n\nWrite-Host \"Cloning repo: $($Parameters.DevOpsRepoName)\"\ngit clone https://vsts:$(System.AccessToken)@$($Parameters.DevOpsAccountName).visualstudio.com/$($Parameters.DevOpsProjectName)/_git/$($Parameters.DevOpsRepoName) $CloneToFolder\nWrite-Host \"Clone complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Npm install (JavaScript): WebResources",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasJavaScriptFiles'], 'true'))",
                        "task": {
                            "id": "fe47e961-9fa8-4106-8639-368c022d43ad",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "command": "install",
                            "workingDir": "$(Agent.BuildDirectory)\\Repos\\$(WebResourcesRepoName)",
                            "verbose": "false",
                            "customCommand": "",
                            "customRegistry": "useNpmrc",
                            "customFeed": "",
                            "customEndpoint": "",
                            "publishRegistry": "useExternalRegistry",
                            "publishFeed": "",
                            "publishPackageMetadata": "true",
                            "publishEndpoint": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Npm test(JavaScript): WebResources",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasJavaScriptFiles'], 'true'))",
                        "task": {
                            "id": "fe47e961-9fa8-4106-8639-368c022d43ad",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "command": "custom",
                            "workingDir": "$(Agent.BuildDirectory)\\Repos\\$(WebResourcesRepoName)",
                            "verbose": "false",
                            "customCommand": "test",
                            "customRegistry": "useNpmrc",
                            "customFeed": "",
                            "customEndpoint": "",
                            "publishRegistry": "useExternalRegistry",
                            "publishFeed": "",
                            "publishPackageMetadata": "true",
                            "publishEndpoint": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Publish Test Results (JavaScript): WebResources",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasJavaScriptFiles'], 'true'))",
                        "task": {
                            "id": "0b0f01ed-7dde-43ff-9cbb-e48954daf9b1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "testRunner": "JUnit",
                            "testResultsFiles": "TEST-RESULT.xml",
                            "searchFolder": "$(Agent.BuildDirectory)\\Repos\\$(WebResourcesRepoName)\\testresults",
                            "mergeTestResults": "false",
                            "failTaskOnFailedTests": "false",
                            "testRunTitle": "",
                            "platform": "",
                            "configuration": "",
                            "publishRunAttachments": "true"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Publish Code Coverage (JavaScript): WebResources",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasJavaScriptFiles'], 'true'))",
                        "task": {
                            "id": "2a7ebc54-c13e-490e-81a5-d7561ab7cd97",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "codeCoverageTool": "Cobertura",
                            "summaryFileLocation": "$(Agent.BuildDirectory)\\Repos\\$(WebResourcesRepoName)\\coverage\\cobertura-coverage.xml",
                            "reportDirectory": "$(Agent.BuildDirectory)\\Repos\\$(WebResourcesRepoName)\\coverage",
                            "additionalCodeCoverageFiles": "",
                            "failIfCoverageEmpty": "false"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Plugins): Check For Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Determines if any plug-ins are included in the target solution\n#\n# Output Pipeline Variable: D365SolutionHasPluginAssemblies (boolean to indicate if plugins are present in the solution)\n# Output Pipeline Variable: D365SolutionPluginAssemblies (comma delimited list of plug-in assembly names)\n\n$Parameters = @{\n    SourceFolder = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\\PluginAssemblies\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$HasPluginAssemblies = $false\n$PluginAssemblies = ''\n\nWrite-Host \"Searching for plug-ins\"\nif (Test-Path $($Parameters.SourceFolder)) {\n    $PluginAssemblies = (Get-ChildItem -recurse -Path $($Parameters.SourceFolder) -File *.dll | select $_.Name) -join ','\n    $HasPluginAssemblies = $true\n    Write-Host \"Found: $PluginAssemblies\"\n}\nWrite-Host \"Search complete\"\n\nIf (!$HasPluginAssemblies) {\n    Write-Host \"No plug-in assemblies found\"\n}\n\nWrite-Host \"##vso[task.setvariable variable=D365SolutionHasPluginAssemblies;]$HasPluginAssemblies\"\nWrite-Host \"##vso[task.setvariable variable=D365SolutionPluginAssemblies;]$PluginAssemblies\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Plugins): Clone Repository: Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasPluginAssemblies'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Clones an Azure DevOps git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n\n$Parameters = @{\n    DevOpsAccountName = \"$env:VSTS_ACCOUNT\"\n    DevOpsProjectName = \"$(System.TeamProject)\"\n    DevOpsRepoName = \"$(PluginsRepoName)\"\n    TargetFolder = \"$(Agent.BuildDirectory)\\Repos\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$CloneToFolder = \"$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nNew-Item -ItemType Directory -Force -Path $CloneToFolder\nWrite-Host \"Created folder: $CloneToFolder\"\n\nWrite-Host \"Cloning repo: $($Parameters.DevOpsRepoName)\"\ngit clone https://vsts:$(System.AccessToken)@$($Parameters.DevOpsAccountName).visualstudio.com/$($Parameters.DevOpsProjectName)/_git/$($Parameters.DevOpsRepoName) $CloneToFolder\nWrite-Host \"Clone complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Command Line Script: NuGet Restore (Plugins): Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "d9bafed4-0b18-4f58-968d-86655b4d2ce9",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "script": "\"C:\\Program Files\\NuGet\\nuget.exe\" restore $(Agent.BuildDirectory)\\Repos\\$(PluginsRepoName)\\Demo.FakeXrmEasy\\Demo.FakeXrmEasy.sln",
                            "workingDirectory": "",
                            "failOnStderr": "false"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": false,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "(Not used on private agent) NuGet Restore (Plugins): Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasPluginAssemblies'], 'true'))",
                        "task": {
                            "id": "333b11bd-d341-40d9-afcf-b32d5ce6f23b",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "command": "restore",
                            "solution": "$(Agent.BuildDirectory)\\Repos\\$(PluginsRepoName)\\**\\*.sln",
                            "selectOrConfig": "select",
                            "feedRestore": "",
                            "includeNuGetOrg": "true",
                            "nugetConfigPath": "",
                            "externalEndpoints": "",
                            "noCache": "false",
                            "disableParallelProcessing": "false",
                            "packagesDirectory": "",
                            "verbosityRestore": "Detailed",
                            "searchPatternPush": "$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg",
                            "nuGetFeedType": "internal",
                            "feedPublish": "",
                            "publishPackageMetadata": "true",
                            "allowPackageConflicts": "false",
                            "externalEndpoint": "",
                            "verbosityPush": "Detailed",
                            "searchPatternPack": "**/*.csproj",
                            "configurationToPack": "$(BuildConfiguration)",
                            "outputDir": "$(Build.ArtifactStagingDirectory)",
                            "versioningScheme": "off",
                            "includeReferencedProjects": "false",
                            "versionEnvVar": "",
                            "requestedMajorVersion": "1",
                            "requestedMinorVersion": "0",
                            "requestedPatchVersion": "0",
                            "packTimezone": "utc",
                            "includeSymbols": "false",
                            "toolPackage": "false",
                            "buildProperties": "",
                            "basePath": "",
                            "verbosityPack": "Detailed",
                            "arguments": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Build Solution (Plugins): Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasPluginAssemblies'], 'true'))",
                        "task": {
                            "id": "71a9a2d3-a98a-4caa-96ab-affca411ecda",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "solution": "$(Agent.BuildDirectory)\\Repos\\$(PluginsRepoName)\\**\\*.csproj",
                            "vsVersion": "latest",
                            "msbuildArgs": "",
                            "platform": "",
                            "configuration": "$(BuildConfig)",
                            "clean": "true",
                            "maximumCpuCount": "false",
                            "restoreNugetPackages": "false",
                            "msbuildArchitecture": "x86",
                            "logProjectEvents": "true",
                            "createLogFile": "false",
                            "logFileVerbosity": "normal"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "VsTest TestAssemblies (Plugins): Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasPluginAssemblies'], 'true'))",
                        "task": {
                            "id": "ef087383-ee5e-42c7-9a53-ab56c98420f9",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "testSelector": "testAssemblies",
                            "testAssemblyVer2": "**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**",
                            "testPlan": "",
                            "testSuite": "",
                            "testConfiguration": "",
                            "tcmTestRun": "$(test.RunId)",
                            "searchFolder": "$(Agent.BuildDirectory)\\Repos\\$(PluginsRepoName)",
                            "testFiltercriteria": "",
                            "runOnlyImpactedTests": "false",
                            "runAllTestsAfterXBuilds": "50",
                            "uiTests": "false",
                            "vstestLocationMethod": "version",
                            "vsTestVersion": "toolsInstaller",
                            "vstestLocation": "",
                            "runSettingsFile": "",
                            "overrideTestrunParameters": "",
                            "pathtoCustomTestAdapters": "",
                            "runInParallel": "False",
                            "runTestsInIsolation": "False",
                            "codeCoverageEnabled": "true",
                            "otherConsoleOptions": "",
                            "distributionBatchType": "basedOnTestCases",
                            "batchingBasedOnAgentsOption": "autoBatchSize",
                            "customBatchSizeValue": "10",
                            "batchingBasedOnExecutionTimeOption": "autoBatchSize",
                            "customRunTimePerBatchValue": "60",
                            "dontDistribute": "False",
                            "testRunTitle": "",
                            "platform": "",
                            "configuration": "",
                            "publishRunAttachments": "true",
                            "diagnosticsEnabled": "True",
                            "collectDumpOn": "onAbortOnly",
                            "rerunFailedTests": "False",
                            "rerunType": "basedOnTestFailurePercentage",
                            "rerunFailedThreshold": "30",
                            "rerunFailedTestCasesMaxLimit": "5",
                            "rerunMaxAttempts": "3"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Plugins): Update Solution Plugins",
                        "timeoutInMinutes": 0,
                        "condition": "and(succeeded(), eq(variables['D365SolutionHasPluginAssemblies'], 'true'))",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Replaces plug-ins in extracted solution xml with debug/release built versions\n\n$Parameters = @{\n    SourceFolder =  \"$(Agent.BuildDirectory)\\Repos\\$(PluginsRepoName)\"\n    XmlFolder = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\\PluginAssemblies\"\n    AssemblyList = \"$(D365SolutionPluginAssemblies)\"\n    BuildConfig = \"$(BuildConfig)\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$Assemblies = $($Parameters.AssemblyList).Split(',')\n\n# Find bin\\debug|release folders in solution\nWrite-Host \"Searching for plug-in folders\"\n$AssemblyFolders = (Get-ChildItem $($Parameters.SourceFolder) -Recurse | Where-Object `\n    { $_.PSIsContainer -and $_.FullName.EndsWith(\"bin\\$($Parameters.BuildConfig)\",'CurrentCultureIgnoreCase')}) | select Fullname\nWrite-Host \"Search complete\"\n\n# Search folders for matching assembly\nWrite-Host \"Processing solution assemblies\"\nForEach ($file in $Assemblies) {\n    Write-Host \"  Lookng for file: $file\"\n    $Found = $false\n\n    ForEach($folder in $AssemblyFolders) {\n        Write-Host \"    Searching folder: $($folder.Fullname)\"\n\n        # Skip test projects\n        If (Test-Path \"$($folder.Fullname)\\Microsoft.VisualStudio.TestPlatform.TestFramework.dll\" -PathType Leaf) {\n            Write-Host '    Skipping test folder'\n            continue\n        }\n\n        # Search for matching assembly with periods removed (like in solution xml)\n        $AssemblyPath = Get-ChildItem -Path \"$($folder.Fullname)\" | Where-Object { $_.Name.Replace('.','') -eq $file.Replace('.','') } `\n            | select Fullname -ExpandProperty FullName\n\n        If ($AssemblyPath) {\n            Write-Host \"    Found: $AssemblyPath\"\n            $Found = $true       \n\n            # Find matching assembly in extracted solution xml\n            $XmlPluginAssembly = Get-ChildItem -recurse -Path $($Parameters.XmlFolder) -File $file | select Fullname -ExpandProperty FullName\n            Write-Host \"    XmlPluginAssembly: $XmlPluginAssembly\"\n\n            # Copy assembly to extracted solution xml\n            Write-Host \"    Copying $AssemblyPath to $XmlPluginAssembly\"\n            Copy-Item -Path $AssemblyPath -Destination $XmlPluginAssembly\n            Write-Host \"    Copy complete\"\n            break\n        }\n    }\n\n    if (!$Found) {\n        Write-Error \"Unable to find assembly: $file\"\n    }\n}\nWrite-Host \"Processing complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Import): Pack Solution",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Pack extracted customization xml into a solution zip file\n# \n# https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/compress-extract-solution-file-solutionpackager\n#\n# Prerequisites:\n# Clone BuildTools repository\n\n$Parameters = @{\n    SolutionPackagerPath = \"$(Agent.BuildDirectory)\\BuildTools\\SDK\\SolutionPackager\\SolutionPackager.exe\"\n    SolutionName = \"$(D365SolutionFilename)\"\n    SourcePath = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\"\n    OutputPath = \"$(Agent.BuildDirectory)\\Packed\\Unmanaged\"\n    IsManaged = $false\n    MappingFilePath = \"\"\n    TreatPackWarningsAsErrors = $false\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n# Pack solution file\n$PackageType = If ($Parameters.IsManaged) {'Managed'} Else {'Unmanaged'}\nWrite-Host \"PackageType: $PackageType\"\n\n$SolutionFullPath = \"$($Parameters.OutputPath)\\$($Parameters.SolutionName)\"\nWrite-Host \"SolutionFullPath: $SolutionFullPath\"\n\n$Map = If (![string]::IsNullOrEmpty($Parameters.MappingFilePath)) {\"/map:'$($Parameters.MappingFilePath)'\"}\nWrite-Host \"Map: $Map\"\n\nWrite-Host \"Packing solution file: $SolutionFullPath\"\n$PackOuput = & \"$($Parameters.SolutionPackagerPath)\" /action:Pack /zipfile:\"$SolutionFullPath\" /folder:\"$($Parameters.SourcePath)\" `\n    /packagetype:$PackageType /errorlevel:Info $Map\nWrite-Host $PackOuput\n\n# Check for errors\nIf ($LastExitCode -ne 0) {\n    Throw \"Solution Pack operation failed with exit code: $LastExitCode\"\n}\nElse {\n    If (($PackOuput -ne $null) -and ($PackOuput -like \"*warnings encountered*\")) {\n        If ($Parameters.TreatPackWarningsAsErrors) {\n            Throw \"Solution Packager encountered warnings. Check the output\"\n        }\n        Else {\n            Write-Warning \"Solution Packager encountered warnings. Check the output\"\n        }\n    }\n    Else {\n        Write-Host \"Solution Pack completed successfully\"\n    }\n}\nWrite-Host \"Pack complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Xml): Apply Customization Changes",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Copies extracted solution xml to a git repository folder with the same solution name\n#\n# Prerequisites:\n# Clone BuildTools repository\n# Dependencies:\n# PowerShell\\SyncFolder.ps1\n\n$Parameters = @{\n    SourceFolder = \"$(Agent.BuildDirectory)\\Extracted\\Unmanaged\"\n    TargetFolder = \"$(Agent.BuildDirectory)\\Repos\\$(SolutionXmlRepoName)\"\n    SolutionName = \"$(D365SolutionName)\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$TargetSolutionFolder = $($Parameters.TargetFolder) + $($Parameters.SolutionName)\nWrite-Host (\"TargetSolutionFolder: $TargetSolutionFolder\")\n\nWrite-Host \"Syncing $($Parameters.SourceFolder) to $TargetSolutionFolder\"\n& \"$(Agent.BuildDirectory)\\BuildTools\\PowerShell\\SyncFolder.ps1\" -SourceFolder \"$($Parameters.SourceFolder)\" -TargetFolders \"$TargetSolutionFolder\"\nWrite-Host \"Sync complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Xml): Commit Customization Changes",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Commits changes to a git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n# Ensure Project Collection Build Service Repository Permission: Contribute is Allow \n\n$Parameters = @{\n    DevOpsRepoName = \"$(SolutionXmlRepoName)\"\n    TargetFolder = 'Repos'\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$FullRepoPath = \"$(Agent.BuildDirectory)\\$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nWrite-Host \"FullRepoPath: $FullRepoPath\"\n\ncd \"$FullRepoPath\"\n\n$msg = \"Commit from Azure DevOps CI\"\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Azure DevOps CI\"\n\ngit add *\ngit commit -a -m $msg\n\nWrite-Host \"Committing changes to: $($Parameters.DevOpsRepoName)\"\ngit -c http.extraheader=\"Authorization: bearer $(System.AccessToken)\" push -f origin HEAD:$(Branch)\nWrite-Host \"Commit complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Zip): Clone Repository: SolutionZip",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Clones an Azure DevOps git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n\n$Parameters = @{\n    DevOpsAccountName = \"$env:VSTS_ACCOUNT\"\n    DevOpsProjectName = \"$(System.TeamProject)\"\n    DevOpsRepoName = \"$(SolutionZipRepoName)\"\n    TargetFolder = \"$(Agent.BuildDirectory)\\Repos\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$CloneToFolder = \"$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nNew-Item -ItemType Directory -Force -Path $CloneToFolder\nWrite-Host \"Created folder: $CloneToFolder\"\n\nWrite-Host \"Cloning repo: $($Parameters.DevOpsRepoName)\"\ngit clone https://vsts:$(System.AccessToken)@$($Parameters.DevOpsAccountName).visualstudio.com/$($Parameters.DevOpsProjectName)/_git/$($Parameters.DevOpsRepoName) $CloneToFolder\nWrite-Host \"Clone complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Zip): Add New Solution File",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Copies a solution zip file to a git repository folder with the same name\n\n$Parameters = @{\n    DevOpsRepoName = \"$(SolutionZipRepoName)\"\n    TargetFolder = 'Repos'\n    SolutionFullPath = \"$(Agent.BuildDirectory)\\Packed\\Unmanaged\\$(D365SolutionFilename)\"\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$FullRepoPath = \"$(Agent.BuildDirectory)\\$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nWrite-Host \"FullRepoPath: $FullRepoPath\"\n\n$FileName = [System.IO.Path]::GetFileNameWithoutExtension($($Parameters.SolutionFullPath))\nWrite-Host \"FileName: $FileName\"\n\n$SolutionFolderName = $FileName.Split('_')[0]\nWrite-Host \"SolutionFolderName: $SolutionFolderName\"\n\n$FullRepoPath = \"$FullRepoPath\\$SolutionFolderName\"\nWrite-Host \"FullRepoPath: $FullRepoPath\"\n\nNew-Item -ItemType Directory -Force -Path \"$FullRepoPath\"\n\nWrite-Host \"Copying $($Parameters.SolutionFullPath) to $FullRepoPath\"\nCopy-Item -Path $($Parameters.SolutionFullPath) -Destination $FullRepoPath\nWrite-Host \"Copy complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "PowerShell Script (Zip): Commit Solution File Changes",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                            "versionSpec": "2.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "targetType": "inline",
                            "filePath": "",
                            "arguments": "",
                            "script": "# Commits changes to a git repository\n# \n# Prerequisites:\n# Ensure Azure DevOps Agent Job Options: Allow scripts to access the OAuth token is checked\n# Ensure Project Collection Build Service Repository Permission: Contribute is Allow \n\n$Parameters = @{\n    DevOpsRepoName = \"$(SolutionZipRepoName)\"\n    TargetFolder = 'Repos'\n}\nWrite-Host \"Executing with parameters:\"\nWrite-Host ($Parameters | Out-String)\n\n$FullRepoPath = \"$(Agent.BuildDirectory)\\$($Parameters.TargetFolder)\\$($Parameters.DevOpsRepoName)\"\nWrite-Host \"FullRepoPath: $FullRepoPath\"\n\ncd \"$FullRepoPath\"\n\n$msg = \"Commit from Azure DevOps CI\"\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Azure DevOps CI\"\n\ngit add *\ngit commit -a -m $msg\n\nWrite-Host \"Committing changes to: $($Parameters.DevOpsRepoName)\"\ngit -c http.extraheader=\"Authorization: bearer $(System.AccessToken)\" push -f origin HEAD:$(Branch)\nWrite-Host \"Commit complete\"",
                            "errorActionPreference": "stop",
                            "failOnStderr": "false",
                            "ignoreLASTEXITCODE": "false",
                            "pwsh": "false",
                            "workingDirectory": ""
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": false,
                        "alwaysRun": false,
                        "displayName": "Publish Artifact: Solution File",
                        "timeoutInMinutes": 0,
                        "condition": "succeeded()",
                        "task": {
                            "id": "2ff763a7-ce83-4e1f-bc89-0ae63477cebe",
                            "versionSpec": "1.*",
                            "definitionType": "task"
                        },
                        "inputs": {
                            "PathtoPublish": "$(Agent.BuildDirectory)\\Packed\\Unmanaged",
                            "ArtifactName": "solution",
                            "ArtifactType": "Container",
                            "TargetPath": "",
                            "Parallel": "false",
                            "ParallelCount": "8"
                        }
                    },
                    {
                        "environment": {},
                        "enabled": true,
                        "continueOnError": true,
                        "alwaysRun": true,
                        "displayName": "Task group: Build Logging",
                        "timeoutInMinutes": 0,
                        "condition": "succeededOrFailed()",
                        "task": {
                            "id": "f04a3f5b-dcb5-441d-bba0-7965d791f24c",
                            "versionSpec": "1.*",
                            "definitionType": "metaTask"
                        },
                        "inputs": {
                            "AppInsightsKey": "$(AppInsightsKey)"
                        }
                    }
                ],
                "name": "Container Agent",
                "refName": "Job_1",
                "condition": "succeeded()",
                "target": {
                    "executionOptions": {
                        "type": 0
                    },
                    "allowScriptsAuthAccessOption": true,
                    "type": 1
                },
                "jobAuthorizationScope": 1
            }
        ],
        "type": 1
    },
    "repository": {
        "properties": {
            "cleanOptions": "3",
            "labelSources": "0",
            "labelSourcesFormat": "$(build.buildNumber)",
            "reportBuildStatus": "true",
            "gitLfsSupport": "false",
            "skipSyncSource": "true",
            "checkoutNestedSubmodules": "false",
            "fetchDepth": "1"
        },
        "id": "21a8148d-a71e-4b08-8663-34152f43d8f8",
        "type": "TfsGit",
        "name": "SolutionZip",
        "url": "https://YourAzureDevopsName.visualstudio.com/ALMTest/_git/SolutionZip",
        "defaultBranch": "refs/heads/master",
        "clean": "true",
        "checkoutSubmodules": false
    },
    "processParameters": {},
    "quality": 1,
    "authoredBy": {
        "displayName": "Your.Name",
        "url": "https://spsprodeus23.vssps.visualstudio.com/A1148bcc9-7e55-42f2-87b0-a3e21023d894/_apis/Identities/06e607bd-81a8-4114-84bf-3b64e7060e4a",
        "_links": {
            "avatar": {
                "href": "https://YourAzureDevopsName.visualstudio.com/_apis/GraphProfile/MemberAvatars/aad.YjRhYzBjMGQtNjQxMy03MWZhLTljNmMtZTFhMjYxM2QyZTE2"
            }
        },
        "id": "06e607bd-81a8-4114-84bf-3b64e7060e4a",
        "uniqueName": "Your.Name@outlook.com",
        "imageUrl": "https://YourAzureDevopsName.visualstudio.com/_api/_common/identityImage?id=06e607bd-81a8-4114-84bf-3b64e7060e4a",
        "descriptor": "aad.YjRhYzBjMGQtNjQxMy03MWZhLTljNmMtZTFhMjYxM2QyZTE2"
    },
    "drafts": [],
    "queue": {
        "_links": {
            "self": {
                "href": "https://YourAzureDevopsName.visualstudio.com/_apis/build/Queues/326"
            }
        },
        "id": 326,
        "name": "Azure DevOps",
        "url": "https://YourAzureDevopsName.visualstudio.com/_apis/build/Queues/326",
        "pool": {
            "id": 10,
            "name": "Azure DevOps"
        }
    },
    "id": 40,
    "name": "UGFocus2019",
    "url": "https://YourAzureDevopsName.visualstudio.com/b455f045-317c-4982-be69-da57d4e4f6ba/_apis/build/Definitions/40?revision=55",
    "uri": "vstfs:///Build/Definition/40",
    "path": "\\",
    "type": 2,
    "queueStatus": 0,
    "revision": 55,
    "createdDate": "2019-03-09T18:12:32.877Z",
    "project": {
        "id": "b455f045-317c-4982-be69-da57d4e4f6ba",
        "name": "UGFocus2019",
        "url": "https://YourAzureDevopsName.visualstudio.com/_apis/projects/b455f045-317c-4982-be69-da57d4e4f6ba",
        "state": 1,
        "revision": 436007706,
        "visibility": 0,
        "lastUpdateTime": "2019-03-08T17:58:41.717Z"
    }
}